#+TITLE: org-opml

=org-opml= lets you edit OPML files using Org mode in Emacs.

Let's break that down:

- [[http://dev.opml.org/spec2.html][OPML]] is a standardized XML file format for storing outlines.
- [[http://orgmode.org/][Org mode]] is an Emacs extension for editing outlines (among other things).
- [[http://www.gnu.org/software/emacs/][Emacs]] is a powerful text editor and programming environment.

=org-opml= came about as Org mode's [[http://orgmode.org/org.html#Document-Structure][outliner interface]] is just about
perfect, except I was looking for a way to save my outlines as OPML
rather than Org mode's default file format of plain text with light
markup.

Here's how it works:

Once =org-opml= is installed and you open an OPML file, it converts
the OPML to Org mode style text. Think stars for headlines, dashes for
list items, etc. This text is then displayed in Emacs and you can edit
it freely using Org mode.

When saving, the reverse happens. The displayed Org mode style text is
converted to OPML and the result is written to disk.

*So, in Emacs, you see Org mode. But on disk, it's OPML.*

I find this to be the best of both worlds. You get all the power of
Emacs/Org mode to edit your outlines while the resulting file can be
parsed using standard XML/OPML libraries.

* Features

- Handles headlines, plain list items, and paragraphs
- HTML entities (<, >, &, etc.) are safely escaped
- Can set =<outline>= attributes via property drawers
- Uses standard [[http://orgmode.org/org.html#Export-settings][export settings]] in the =<head>= element
- Follows the OPML 2.0 [[http://dev.opml.org/spec2.html][specification]]
- Pure Elisp implementation with no external dependencies
- Supports both simple outlines and complex structured documents with attributes

* Installation

** From MELPA (Recommended)

=org-opml= is available on [[https://melpa.org/][MELPA]]. To install:

1. Add MELPA to your package archives if you haven't already:
   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
   (package-initialize)
   #+END_SRC

2. Install the package:
   #+BEGIN_SRC emacs-lisp
   M-x package-install RET org-opml RET
   #+END_SRC

3. The package will be automatically loaded when you open an =.opml= file.

** Manually

1) Copy =org-opml.el= and =ox-opml.el= into a directory in your =load-path=
2) Then, in =~/.emacs= put =(require 'org-opml)=
3) Move your cursor after the last parenthesis and type =C-x
   C-e=. Everything in =org-opml.el= will now be evaluated and you
   should be ready to start using it.

** With use-package

#+BEGIN_SRC emacs-lisp
(use-package org-opml
  :ensure t)
#+END_SRC

* How it works

=org-opml= consists of two main files:

- *org-opml.el* handles file format registration and OPML to Org conversion
  using pure Elisp with Emacs' built-in XML parsing capabilities.
- *ox-opml.el* converts Org mode to OPML. It defines an OPML backend
  using Org mode's export dispatcher.

The conversion logic intelligently determines whether OPML outline elements should
become headlines, list items, or paragraphs based on:
- Presence of custom attributes (forces headline structure)
- Hierarchical context and nesting level
- Whether the document uses "simple" vs "attributed" OPML patterns

Also, as =ox-opml.el= is built using Org mode's export dispatcher, you
can perform a one-way Org mode -> OPML export by typing =C-c C-e m= in
an open Org mode file.

** Testing

The project includes example files in the =examples/= directory that demonstrate
both simple hierarchical outlines (like =nba.opml=) and complex attributed 
documents (like =attributes.opml=).

* Changes from Previous Versions

** Version 2.0.0

- *Breaking Change*: Removed Python dependency. The package now uses pure Elisp
  for all OPML parsing and conversion.
- Added proper package headers for MELPA compliance
- Improved error handling and robustness
- Better adherence to Emacs Lisp coding conventions
- Added lexical binding support
- Comprehensive documentation improvements

If you were using a previous version that required Python, you can safely
upgrade to this version. All functionality is preserved while eliminating
the external dependency.

* Contributing

This package is ready for MELPA submission. The codebase follows MELPA
guidelines including:

- Proper package headers with version, dependencies, and metadata
- GPL-compatible licensing
- Pure Elisp implementation with no external dependencies
- Comprehensive documentation
- Lexical binding enabled
- Proper autoload cookies

* License

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
