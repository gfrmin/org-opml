#+TITLE: org-opml

=org-opml= lets you edit OPML files using Org mode in Emacs.

Let's break that down:

- [[http://dev.opml.org/spec2.html][OPML]] is a standardized XML file format for storing outlines.
- [[http://orgmode.org/][Org mode]] is an Emacs extension for editing outlines (among other things).
- [[http://www.gnu.org/software/emacs/][Emacs]] is a powerful text editor and programming environment.

=org-opml= came about as Org mode's [[http://orgmode.org/org.html#Document-Structure][outliner interface]] is just about
perfect, except I was looking for a way to save my outlines as OPML
rather than Org mode's default file format of plain text with light
markup.

Here's how it works:

Once =org-opml= is installed and you open an OPML file, it converts
the OPML to Org mode style text. Think stars for headlines, dashes for
list items, etc. This text is then displayed in Emacs and you can edit
it freely using Org mode.

When saving, the reverse happens. The displayed Org mode style text is
converted to OPML and the result is written to disk.

*So, in Emacs, you see Org mode. But on disk, it's OPML.*

I find this to be the best of both worlds. You get all the power of
Emacs/Org mode to edit your outlines while the resulting file can be
parsed using standard XML/OPML libraries.

* Features

- Handles headlines, plain list items, and paragraphs
- HTML entities (<, >, &, etc.) are safely escaped
- Can set =<outline>= attributes via property drawers
- Uses standard [[http://orgmode.org/org.html#Export-settings][export settings]] in the =<head>= element
- Follows the OPML 2.0 [[http://dev.opml.org/spec2.html][specification]]
- Includes comprehensive test suite with example files
- Supports both simple outlines and complex structured documents with attributes

* Installation

Until we get this on MELPA, you have a few options:

** Manually

1) Copy =org-opml.el=, =ox-opml.el=, and =opml2org.py= into a directory in your =load-path=
2) Ensure =opml2org.py= is executable: =chmod +x opml2org.py=
3) Make sure Python 3 is available on your system
4) Then, in =~/.emacs= put =(load-library "org-opml")=
5) Move your cursor after the last parenthesis and type =C-x
   C-e=. Everything in =org-opml.el= will now be evaluated and you
   should be ready to start using it.

*Note:* The =opml2org.py= script will be automatically located if it's in your PATH, 
in the current directory, or in the same directory as the Elisp files.

** With el-get

From [[https://github.com/org-opml/org-opml/issues/1#issuecomment-250941990][caiorss on GitHub]]:

1. Install el-get
2. Execute this code in the scratch buffer to install the package. It is already the recipe.
#+BEGIN_EXAMPLE emacs-lisp
;; Install https://github.com/org-opml/org-opml
(el-get-bundle org-opml
  :type github
  :pkgname     "org-opml/org-opml"
  :description "org-opml lets you edit OPML files using Org mode in Emacs."
  )
#+END_EXAMPLE
3. Then add this line to ~/emacs.d/.init.el
#+BEGIN_EXAMPLE emacs-lisp
(load-library "org-opml")
#+END_EXAMPLE
** With use-package
Clone this git repo somewhere, such as =/home/user/org-opml/=, then add the
following lines to your Elisp:

#+BEGIN_EXAMPLE emacs-lisp
(setq org-opml-src "/home/user/org-opml/")

(use-package ox-opml
  :ensure t
  :load-path org-opml-src)

(use-package org-opml
  :ensure t
  :load-path org-opml-src)
#+END_EXAMPLE
* How it works

=org-opml= consists of three main files:

- *ox-opml.el* converts Org mode to OPML. It defines an OPML backend
  using Org mode's export dispatcher.
- *opml2org.py* converts OPML to Org mode. It's a Python 3 script that handles
  the intelligent conversion of OPML structure to appropriate Org mode elements
  (headlines, lists, paragraphs) based on context and attributes.
- *org-opml.el* handles all the necessary configuration and file format registration.

The conversion logic intelligently determines whether OPML outline elements should
become headlines, list items, or paragraphs based on:
- Presence of custom attributes (forces headline structure)
- Hierarchical context and nesting level
- Whether the document uses "simple" vs "attributed" OPML patterns

Also, as =ox-opml.el= is built using Org mode's export dispatcher, you
can perform a one-way Org mode -> OPML export by typing =C-c C-e m= in
an open Org mode file.

** Testing

The project includes a comprehensive test suite in =test_opml2org.py= with
example files in the =examples/= directory. Run tests with:

#+BEGIN_EXAMPLE
python3 test_opml2org.py
#+END_EXAMPLE

The examples demonstrate both simple hierarchical outlines (like =nba.opml=)
and complex attributed documents (like =attributes.opml=).
